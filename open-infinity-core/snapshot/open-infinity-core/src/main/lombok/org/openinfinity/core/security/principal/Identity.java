// Generated by delombok at Thu Jan 16 10:49:56 EET 2014
/*
 * Copyright (c) 2011-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openinfinity.core.security.principal;

import java.io.Serializable;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
/**
 * Class for maintaining the state of the federated identity. Implements <code>org.springframework.security.core.Authentication</code> interface.
 * 
 * @author Ilkka Leinonen
 * @version 1.1.0
 * @since 1.4.0
 */

public class Identity implements Authentication, Serializable {
	/**
	 * Represents the user's first name for the user session.
	 */
	private String firstName;
	/**
	 * Represents the user's last name for the user session.
	 */
	private String lastName;
	/**
	 * Represents the user's phone number for the user session.
	 */
	private String phoneNumber;
	/**
	 * Represents the user's email for the user session.
	 */
	private String email;
	/**
	 * Represents the user principal for the user session.
	 */
	private UserPrincipal userPrincipal;
	/**
	 * Represents the state of the authentication process.
	 */
	private boolean authenticated;
	/**
	 * Represents the collection of role principals.
	 */
	private Collection<RolePrincipal> rolePrincipals;
	/**
	 * Represents the tenant principal.
	 */
	private TenantPrincipal<?> tenantPrincipal;
	/**
	 * Represents the attributes for user.
	 */
	private Map<String, String> userAttributes = new HashMap<String, String>();
	/**
	 * Returns all roles associated with the user.
	 * 
	 * @return
	 */
	public List<String> getRoles() {
		List<String> roles = new ArrayList<String>();
		for (RolePrincipal rolePrincipal : rolePrincipals) {
			roles.add(rolePrincipal.getName());
		}
		return Collections.unmodifiableList(roles);
	}
	/**
	 * Returns all principals for the user.
	 * 
	 * @return
	 */
	public Collection<Principal> getAllPrincipalsForIdentity() {
		Collection<Principal> principals = new ArrayList<Principal>();
		principals.add(userPrincipal);
		principals.add(tenantPrincipal);
		principals.addAll(rolePrincipals);
		return Collections.unmodifiableCollection(principals);
	}
	/**
	 * Clears the context of the identity.
	 */
	public void clear() {
		this.userPrincipal.clear();
		this.tenantPrincipal.clear();
		for (RolePrincipal rolePrincipal : rolePrincipals) {
			rolePrincipal.clear();
		}
		this.rolePrincipals.clear();
		this.userPrincipal = null;
		this.tenantPrincipal = null;
		this.rolePrincipals = null;
	}
	/**
	 * Calculates checksum with salt information for the identity. String presentation of the SHA-512 algorithm will be returned.
	 * 
	 * @param salt Represents the salt
	 * @return
	 */
	public String checksum(String salt) {
		StringBuilder builder = new StringBuilder();
		builder.append(salt);
		if (userPrincipal != null && userPrincipal.getName() != null && userPrincipal.getName().length() > 0) {
			builder.append(userPrincipal.getName());
		}
		if (tenantPrincipal != null && tenantPrincipal.getName() != null && tenantPrincipal.getName().length() > 0) {
			builder.append(tenantPrincipal.getName());
		}
		for (RolePrincipal rolePrincipal : rolePrincipals) {
			if (rolePrincipal != null && rolePrincipal.getName() != null && rolePrincipal.getName().length() > 0) {
				builder.append(rolePrincipal.getName());
			}
		}
		String checksum = DigestUtils.sha512Hex(builder.toString());
		return checksum;
	}
	/**
	 * Adds on user attribute into the identity object.  If the identity previously contained a mapping for
     * the attribute key, the old value is replaced by the specified value.
	 * 
	 * @param attributeKey Represents the user attribute's key.
	 * @param attributeValue Represents the user attribute's value.
	 */
	public void addAttribute(String attributeKey, String attributeValue) {
		this.userAttributes.put(attributeKey, attributeValue);
	}
	/**
	 * Returns collections of GrantedAuthorities for the user.
	 */
	public Collection<GrantedAuthority> getAuthorities() {
		Collection<GrantedAuthority> grantedAuthorities = new ArrayList<GrantedAuthority>();
		for (Principal principal : getAllPrincipalsForIdentity()) {
			if (principal != null) {
				GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(principal.getName());
				grantedAuthorities.add(grantedAuthority);
			}
		}
		return grantedAuthorities;
	}
	/**
	 * Returns always "N/A, Not Available".
	 * 
	 * @return Returns always "N/A, Not Available".
	 */
	public String getPassword() {
		return "N/A";
	}
	/**
	 * Returns name for the user principal.
	 */
	public String getName() {
		return userPrincipal.getName();
	}
	/**
	 * Returns name for the user principal.
	 */
	public Object getCredentials() {
		return userPrincipal.getName();
	}
	/**
	 * Returns the identity object itself.
	 */
	public Object getDetails() {
		return this;
	}
	/**
	 * Returns user principal associated with the identity.
	 */
	public Object getPrincipal() {
		return userPrincipal;
	}
	/**
	 * Returns state of the authentication process.
	 */
	public boolean isAuthenticated() {
		return this.authenticated;
	}
	/**
	 * Setter for the state of authentication process.
	 */
	public void setAuthenticated(boolean isAuthenticated) throws IllegalArgumentException {
		this.authenticated = isAuthenticated;
	}
	
	@java.lang.SuppressWarnings("all")
	public Identity() {
		
	}
	
	@java.lang.SuppressWarnings("all")
	public String getFirstName() {
		return this.firstName;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getLastName() {
		return this.lastName;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getPhoneNumber() {
		return this.phoneNumber;
	}
	
	@java.lang.SuppressWarnings("all")
	public String getEmail() {
		return this.email;
	}
	
	@java.lang.SuppressWarnings("all")
	public UserPrincipal getUserPrincipal() {
		return this.userPrincipal;
	}
	
	@java.lang.SuppressWarnings("all")
	public Collection<RolePrincipal> getRolePrincipals() {
		return this.rolePrincipals;
	}
	
	@java.lang.SuppressWarnings("all")
	public TenantPrincipal<?> getTenantPrincipal() {
		return this.tenantPrincipal;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setFirstName(final String firstName) {
		this.firstName = firstName;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setLastName(final String lastName) {
		this.lastName = lastName;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setPhoneNumber(final String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setEmail(final String email) {
		this.email = email;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setUserPrincipal(final UserPrincipal userPrincipal) {
		this.userPrincipal = userPrincipal;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setRolePrincipals(final Collection<RolePrincipal> rolePrincipals) {
		this.rolePrincipals = rolePrincipals;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setTenantPrincipal(final TenantPrincipal<?> tenantPrincipal) {
		this.tenantPrincipal = tenantPrincipal;
	}
	
	@java.lang.SuppressWarnings("all")
	public void setUserAttributes(final Map<String, String> userAttributes) {
		this.userAttributes = userAttributes;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public java.lang.String toString() {
		return "Identity(firstName=" + this.getFirstName() + ", lastName=" + this.getLastName() + ", phoneNumber=" + this.getPhoneNumber() + ", email=" + this.getEmail() + ", userPrincipal=" + this.getUserPrincipal() + ", authenticated=" + this.isAuthenticated() + ", rolePrincipals=" + this.getRolePrincipals() + ", tenantPrincipal=" + this.getTenantPrincipal() + ", userAttributes=" + this.getUserAttributes() + ")";
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public boolean equals(final java.lang.Object o) {
		if (o == this) return true;
		if (!(o instanceof Identity)) return false;
		final Identity other = (Identity)o;
		if (!other.canEqual((java.lang.Object)this)) return false;
		final java.lang.Object this$firstName = this.getFirstName();
		final java.lang.Object other$firstName = other.getFirstName();
		if (this$firstName == null ? other$firstName != null : !this$firstName.equals(other$firstName)) return false;
		final java.lang.Object this$lastName = this.getLastName();
		final java.lang.Object other$lastName = other.getLastName();
		if (this$lastName == null ? other$lastName != null : !this$lastName.equals(other$lastName)) return false;
		final java.lang.Object this$phoneNumber = this.getPhoneNumber();
		final java.lang.Object other$phoneNumber = other.getPhoneNumber();
		if (this$phoneNumber == null ? other$phoneNumber != null : !this$phoneNumber.equals(other$phoneNumber)) return false;
		final java.lang.Object this$email = this.getEmail();
		final java.lang.Object other$email = other.getEmail();
		if (this$email == null ? other$email != null : !this$email.equals(other$email)) return false;
		final java.lang.Object this$userPrincipal = this.getUserPrincipal();
		final java.lang.Object other$userPrincipal = other.getUserPrincipal();
		if (this$userPrincipal == null ? other$userPrincipal != null : !this$userPrincipal.equals(other$userPrincipal)) return false;
		if (this.isAuthenticated() != other.isAuthenticated()) return false;
		final java.lang.Object this$rolePrincipals = this.getRolePrincipals();
		final java.lang.Object other$rolePrincipals = other.getRolePrincipals();
		if (this$rolePrincipals == null ? other$rolePrincipals != null : !this$rolePrincipals.equals(other$rolePrincipals)) return false;
		final java.lang.Object this$tenantPrincipal = this.getTenantPrincipal();
		final java.lang.Object other$tenantPrincipal = other.getTenantPrincipal();
		if (this$tenantPrincipal == null ? other$tenantPrincipal != null : !this$tenantPrincipal.equals(other$tenantPrincipal)) return false;
		final java.lang.Object this$userAttributes = this.getUserAttributes();
		final java.lang.Object other$userAttributes = other.getUserAttributes();
		if (this$userAttributes == null ? other$userAttributes != null : !this$userAttributes.equals(other$userAttributes)) return false;
		return true;
	}
	
	@java.lang.SuppressWarnings("all")
	public boolean canEqual(final java.lang.Object other) {
		return other instanceof Identity;
	}
	
	@java.lang.Override
	@java.lang.SuppressWarnings("all")
	public int hashCode() {
		final int PRIME = 31;
		int result = 1;
		final java.lang.Object $firstName = this.getFirstName();
		result = result * PRIME + ($firstName == null ? 0 : $firstName.hashCode());
		final java.lang.Object $lastName = this.getLastName();
		result = result * PRIME + ($lastName == null ? 0 : $lastName.hashCode());
		final java.lang.Object $phoneNumber = this.getPhoneNumber();
		result = result * PRIME + ($phoneNumber == null ? 0 : $phoneNumber.hashCode());
		final java.lang.Object $email = this.getEmail();
		result = result * PRIME + ($email == null ? 0 : $email.hashCode());
		final java.lang.Object $userPrincipal = this.getUserPrincipal();
		result = result * PRIME + ($userPrincipal == null ? 0 : $userPrincipal.hashCode());
		result = result * PRIME + (this.isAuthenticated() ? 1231 : 1237);
		final java.lang.Object $rolePrincipals = this.getRolePrincipals();
		result = result * PRIME + ($rolePrincipals == null ? 0 : $rolePrincipals.hashCode());
		final java.lang.Object $tenantPrincipal = this.getTenantPrincipal();
		result = result * PRIME + ($tenantPrincipal == null ? 0 : $tenantPrincipal.hashCode());
		final java.lang.Object $userAttributes = this.getUserAttributes();
		result = result * PRIME + ($userAttributes == null ? 0 : $userAttributes.hashCode());
		return result;
	}
	
	@java.lang.SuppressWarnings("all")
	public Map<String, String> getUserAttributes() {
		return this.userAttributes;
	}
}